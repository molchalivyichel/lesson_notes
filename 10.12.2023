# Первое занятие #первое_занятие

**Интерпретатор** - язык, не имеющий этап компиляции. ЯП использует интерпретатор, который читает код и выполняет действия. Следовательно страдает производительность. 

**Компилятор** - язык, имеющий этап компиляции. Переводит код в машинный код (Код низкого уровня), который не требует дополнительного компонента для её работы. 

**Компоновщик** - это распознавание зависимостей и объединение кода. 

# Второе занятие #второе_занятие

**Директивы препроцессора** начинается с #

Основная часть программы происходит в int main()

**Препроцессор** - инструмент, запускающийся перед фактическим началом компиляции. 
`#include ". . . relative path to FileB\FileB"` - использование в другом файле, файл

Многие приложения c++ используют данный шаблон `int main(int argc, char* argv[])`для запуска программы в командной строке с введёнными данными. 
`int argc`- количество передаваемых аргументов
`char* argv[]`- сами аргументы, вводимые пользователем

**Пространство имен** - это имена присвоенные частям кода, помогающие снизить вероятность конфликтов имен. 
Для уменьшения написания одних и тех же `std::объект` можно использовать `using namespace std;`
Можно использовать указание пространства имен для некоторых объектов

**Пример**
`using std::cout;`
`using std::endl;`

И напоследок всё же лучше использовать `#include <string>` вместо того, чтобы помнить об `using namespace std;`
